{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","quote","setQuote","author","setAuthor","loading","setLoading","className","onClick","fetch","then","response","json","res","content","class","color","showQuote","icon","bxCopyright","id","href","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQA0DeA,MApDf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAyBA,OACE,sBAAKC,UAAU,QAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,SAAf,SACE,0DAEF,qBAAKA,UAAU,UAAf,SACE,wBAAQA,UAAU,MAAMC,QA9Bf,WACfF,GAAW,GACXG,MAAM,mCACHC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACLX,EAASW,EAAIC,SACbV,EAAUS,EAAIV,QACdG,GAAW,OAqBT,yBAIF,cAAC,IAAD,CAAYS,MAAM,SAASV,QAASA,EAASW,MAAM,YAtBvC,WAChB,GAAIf,EACF,OACE,sBAAKM,UAAU,OAAf,UACE,sBAAKA,UAAU,QAAf,eAA0BN,EAA1B,QACA,sBAAKM,UAAU,SAAf,eAA2BJ,QAkB5Bc,MAEH,sBAAKV,UAAU,YAAf,UACE,cAAC,OAAD,CAAMW,KAAMC,IAAaC,GAAG,SAC5B,mBAAGC,KAAK,8BAA8BC,OAAO,SAA7C,+BCtCOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1BZ,M","file":"static/js/main.9790ed0f.chunk.js","sourcesContent":["import \"./style.css\";\nimport { useState } from \"react\";\nimport { Icon } from \"@iconify/react\";\nimport bxCopyright from \"@iconify/icons-bx/bx-copyright\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nfunction App() {\n  const [quote, setQuote] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const getQuote = () => {\n    setLoading(true);\n    fetch(\"https://api.quotable.io/random/\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((res) => {\n        setQuote(res.content);\n        setAuthor(res.author);\n        setLoading(false);\n      });\n  };\n  const showQuote = () => {\n    if (quote) {\n      return (\n        <div className='main'>\n          <div className='quote'>\" {quote} \"</div>\n          <div className='author'>~ {author}</div>\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div className='outer'>\n      <div className='inner'>\n        <div className='header'>\n          <h1>Random Quote Generator</h1>\n        </div>\n        <div className='btn-div'>\n          <button className='btn' onClick={getQuote}>\n            Get Quote\n          </button>\n        </div>\n        <ClipLoader class='loader' loading={loading} color='#28527a' />\n        {showQuote()}\n      </div>\n      <div className='copyright'>\n        <Icon icon={bxCopyright} id='icon' />\n        <a href='https://github.com/TanvNaik' target='_blank'>\n          Tanvi Naik\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}